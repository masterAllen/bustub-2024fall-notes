TEST(BPlusTreeTests, ScaleMixTest) {  // NOLINT
  for (int64_t scale = 1000; scale <= 1000; scale++) {
    // create KeyComparator and index schema
    auto key_schema = ParseCreateStatement("a bigint");
    GenericComparator<8> comparator(key_schema.get());

    auto disk_manager = std::make_unique<DiskManagerUnlimitedMemory>();
    auto *bpm = new BufferPoolManager(50, disk_manager.get());

    // allocate header_page
    page_id_t page_id = bpm->NewPage();

    // create b+ tree
    BPlusTree<GenericKey<8>, RID, GenericComparator<8>> tree("foo_pk", page_id, bpm, comparator, 3, 5);
    GenericKey<8> index_key;
    RID rid;

    std::vector<int64_t> keys(scale);
    std::iota(keys.begin(), keys.end(), 1);

    for (unsigned long i = 0; i < keys.size(); i++) {
      auto key = keys[i];
      int64_t value = key & 0xFFFFFFFF;
      rid.Set(static_cast<int32_t>(key >> 32), value);
      index_key.SetFromInteger(key);
      // tree.Draw(bpm, "../test-" + std::to_string(i) + ".dot");
      tree.Insert(index_key, rid);
      // tree.Draw(bpm, "../test-" + std::to_string(i+1) + ".dot");
    }

    // for (unsigned long i = 0; i < keys.size(); i++) {
    //   auto key = keys[i];
    //   std::vector<RID> rids;
    //   index_key.SetFromInteger(key);
    //   tree.GetValue(index_key, &rids);
    // }

    tree.Draw(bpm, "../test-0.dot");
    for (unsigned long i = 0; i < keys.size(); i++) {
      // for (unsigned long i = 0; i < 1; i++) {
      auto key = keys[0];
      index_key.SetFromInteger(key);
      std::cout << "i = " << i << ", Remove(" << key << ")" << std::endl;
      tree.Remove(index_key);
      // tree.Draw(bpm, "../test-" + std::to_string(i+1) + ".dot");
    }
    delete bpm;
    std::cout << "Scale " << scale << " passed" << std::endl;
    std::cout << "--------------------------------" << std::endl;
  }
}

TEST(BPlusTreeTests, DISABLED_SequentialMixTest) {  // NOLINT
  // create KeyComparator and index schema
  auto key_schema = ParseCreateStatement("a bigint");
  GenericComparator<8> comparator(key_schema.get());

  auto disk_manager = std::make_unique<DiskManagerUnlimitedMemory>();
  auto *bpm = new BufferPoolManager(50, disk_manager.get());

  // allocate header_page
  page_id_t page_id = bpm->NewPage();

  // create b+ tree
  BPlusTree<GenericKey<8>, RID, GenericComparator<8>> tree("foo_pk", page_id, bpm, comparator, 3, 5);
  GenericKey<8> index_key;
  RID rid;

  int64_t scale = 10000;
  std::vector<int64_t> keys(scale);
  std::iota(keys.begin(), keys.end(), 1);

  for (unsigned long i = 0; i < keys.size(); i += 2) {
    for (unsigned long j = 0; j < 2; j++) {
      auto key = keys[i + 1 - j];
      int64_t value = key & 0xFFFFFFFF;
      rid.Set(static_cast<int32_t>(key >> 32), value);
      index_key.SetFromInteger(key);
      tree.Insert(index_key, rid);
    }
  }

  for (unsigned long i = 0; i < keys.size(); i++) {
    auto key = keys[i];
    std::vector<RID> rids;
    index_key.SetFromInteger(key);
    tree.GetValue(index_key, &rids);
  }

  for (unsigned long i = 0; i < keys.size(); i += 2) {
    // for (unsigned long i = 0; i < 13; i+=2) {
    auto key = keys[i];
    index_key.SetFromInteger(key);
    std::cout << "i = " << i << ", Remove(" << key << ")" << std::endl;
    tree.Remove(index_key);
  }
  // tree.Draw(bpm, "../test-2.dot");
  delete bpm;
  std::cout << "Scale " << scale << " passed" << std::endl;
  std::cout << "--------------------------------" << std::endl;
}